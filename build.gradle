buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
        maven{ url 'http://repository.jboss.org/nexus/content/groups/public'}
//        maven{ url 'http://mirrors.ibiblio.org/pub/mirrors/maven2/'}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}

configure(allprojects) { project ->
    group = 'com.store'
    version = version

    ext.springCloudVersion          = 'Dalston.RELEASE'
    ext.springBootVersion           = '1.5.3.RELEASE'
    ext.springBootMyBatisVersion    = '1.2.0'
    ext.springBootpagehelperVersion = '1.1.0'
    ext.springBootAdminVersion      = '1.5.0'
    ext.springBootDruidVersion      = '1.1.3'
    ext.springBootRedisVersion      = '1.4.7.RELEASE'
    ext.junitVersion                = "4.12"
    ext.mysqlVersion                = "5.1.32"
    ext.jacksonVersion              = "2.8.7"
    ext.httpclientVersion           = "4.3.5"
    ext.servletapiVersion           = "3.1.0"
    ext.commonslangVersion          = "2.6"
    ext.commonslang3Version         = "3.3.2"
    ext.commonsioVersion            = "1.3.2"
    ext.commonsnetVersion           = "3.3"
    ext.jsqlparserVersion           = "4.12"
    ext.slf4jVersion                = "1.7.2"
    ext.commonsfileuploadVersion    = "1.3.1"
    ext.jedisVersion                = "2.7.2"
    ext.solrjVersion                = "5.4.0"
    ext.freemarkerVersion           = "2.3.23"
    ext.quartzVersion               = "2.2.2"
    ext.fastjsonVersion             = "1.2.28"
    ext.swagger2Version             = "2.6.1"
    ext.lombokVersion               = "1.16.16"
    ext.fastdfsVersion              = "1.27.0.0"
    ext.beetl_starterVersion        = "0.0.3"
    ext.hutoolVersion               = "3.0.3"
    ext.swagger2Version             = "2.6.1"
    ext.logbackkafkaVersion         = "0.1.0"
    ext.apolloclientVersion         = "1.0.0-rc.2"

    apply plugin: "java"
    apply plugin: 'idea'

    if (!(name.contains('common'))) {
        apply plugin: 'org.springframework.boot'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
        maven{ url 'http://repository.jboss.org/nexus/content/groups/public'}
//        maven{ url 'http://mirrors.ibiblio.org/pub/mirrors/maven2/'}
       

    }

    dependencies {
        if (!(name.contains('common'))) {
            testCompile("org.springframework.boot:spring-boot-starter-test")
            testCompile("junit:junit:${junitVersion}")
        }
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
//    if (!((name.contains('common')) || (name.contains('api'))  || (name == 'store-cloud'))) {
//        task buildDocker(type: Docker, dependsOn: bootRepackage) {
//            push = true
//            registry = dockerRegistry
//            applicationName = jar.baseName
//            dockerfile = file('Dockerfile')
//            doFirst {
//                copy {
//                    from jar
//                    into stageDir
//                }
//            }
//        }
//    }

    if (name.contains('api')) {
        tasks.remove(bootRepackage)
    }

}
project("store-cloud-eureka") {
    description = "store-cloud-eureka"

    dependencies {
        compile("org.springframework.cloud:spring-cloud-starter-eureka-server")
        compile("com.github.danielwegener:logback-kafka-appender:${logbackkafkaVersion}")
    }
}

project("store-cloud-common") {
    description = "store-cloud-common"

    dependencies {
        compileOnly("javax.servlet:javax.servlet-api:${servletapiVersion}")
        compileOnly("redis.clients:jedis:${jedisVersion}")
        compile("org.apache.commons:commons-lang3:${commonslang3Version}")
        compile("commons-lang:commons-lang:${commonslangVersion}")
        compile("com.alibaba:fastjson:${fastjsonVersion}")
        compile("net.oschina.zcx7878:fastdfs-client-java:${fastdfsVersion}")
        compile("org.slf4j:slf4j-api:${slf4jVersion}")
        compile("io.springfox:springfox-swagger-ui:${swagger2Version}")
        compile("io.springfox:springfox-swagger2:${swagger2Version}")
    }
}

project("store-cloud-service-sso-api") {
    description = "store-cloud-serviced-sso-api"

    dependencies {
        compile(project(":store-cloud-common"))
        compile(project(":store-cloud-common-pojo"))
        compile("org.springframework.cloud:spring-cloud-starter-feign")
    }
}
project("store-cloud-service-sso") {
    description = "store-cloud-service-sso"

    dependencies {
        compile(project(":store-cloud-service-sso-api"))
        compile(project(":store-cloud-common-mapper"))
        compile("org.springframework.cloud:spring-cloud-starter-eureka")
        compile("org.springframework.cloud:spring-cloud-starter-zipkin")
        compile("org.springframework.cloud:spring-cloud-starter-hystrix")
        compile("org.springframework.cloud:spring-cloud-starter-bus-amqp")
        compile("org.webjars.npm:apollo-client:${apolloclientVersion}")
//        compile("org.springframework.data:spring-data-redis") //鏆傛椂涓嶄娇鐢�
        compile("org.springframework.boot:spring-boot-starter-redis:${springBootRedisVersion}")
        compile("org.freemarker:freemarker:2.3.23")
    }
}
project("store-cloud-common-pojo") {
    description = "store-cloud-common-pojo"

    dependencies {
        compileOnly("org.projectlombok:lombok:${lombokVersion}")
    }
}

project("store-cloud-common-mapper") {
    description = "store-cloud-common-mapper"

    dependencies {
        compile(project(":store-cloud-common-pojo"))
        compile("mysql:mysql-connector-java:${mysqlVersion}")
        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${springBootMyBatisVersion}")
        compile("com.github.pagehelper:pagehelper-spring-boot-starter:${springBootpagehelperVersion}")
        compile("com.alibaba:druid-spring-boot-starter:${springBootDruidVersion}")
        compile fileTree(dir: 'src', includes: ['/*.xml'])
    }
    jar {
        
        baseName = 'store-cloud-common-mapper'

        
        from('src/main/java') {
            include '**/*.xml'
        }

    }
}

project("store-cloud-web-sso") {
    description = "store-cloud-web-sso"

    dependencies {
        compile(project(":store-cloud-service-sso-api"))
        compile(project(":store-cloud-service-notify-api"))
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.cloud:spring-cloud-starter-eureka")
        compile("org.webjars.npm:apollo-client:${apolloclientVersion}")
        compile("org.springframework.cloud:spring-cloud-starter-hystrix")
        compile("org.springframework.cloud:spring-cloud-starter-bus-amqp")
        compile("org.springframework.cloud:spring-cloud-starter-zipkin")
        compile("org.springframework.boot:spring-boot-starter-aop")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.retry:spring-retry")
        compile("com.piggsoft:beetl-spring-boot-starter:${beetl_starterVersion}")
        compile("org.springframework.boot:spring-boot-starter-redis:${springBootRedisVersion}")
    }
}

project("store-cloud-service-notify-api") {
    description = "store-cloud-serviced-notify-api"
    dependencies {
        compile(project(":store-cloud-common"))
        compile(project(":store-cloud-common-pojo"))
        compile("org.springframework.cloud:spring-cloud-starter-feign")
    }
}

project("store-cloud-service-notify") {
    description = "store-cloud-service-notify"

    dependencies {
        compile(project(":store-cloud-service-notify-api"))
        compile(project(":store-cloud-common-mapper"))
        compile("org.springframework.cloud:spring-cloud-starter-eureka")
        compile("org.springframework.cloud:spring-cloud-starter-zipkin")
        compile("org.springframework.cloud:spring-cloud-starter-hystrix")
        compile("org.springframework.cloud:spring-cloud-starter-bus-amqp")
        compile("org.webjars.npm:apollo-client:${apolloclientVersion}")
//        compile("org.springframework.data:spring-data-redis") //鏆傛椂涓嶄娇鐢�
        compile("org.springframework.boot:spring-boot-starter-redis:${springBootRedisVersion}")
    }
}

configure(rootProject) {
    description = "store-cloud"
    configurations.archives.artifacts.clear()
}

